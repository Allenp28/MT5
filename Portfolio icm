from typing import List
from typing import Dict
from typing import Union
from typing import Tuple
from typing import Optional
from MetaTrader5 import mt5

class Portfolio():

    def __init__(self, account_number: Optional[str]):
        
        self.positions = {}
        self.positions_count = 0
        self.market_value = 0.0
        self.profit_loss = 0.0
        self.risk_tolerance = 0.0
        self.account_number = account_number
        self._icm_client: ICM_Client = None

    def add_position(self, symbol: str, asset_type: str, purchase_date: Optional[str], quantity: int = 0, purchase_price: float =0.0)->dict:

        self.positions[symbol] - {}
        self.positions[symbol]['symbol'] - symbol
        self.positions[symbol]['Quantity'] - quantity
        self.positions[symbol]['purchase_price'] - purchase_price
        self.positions[symbol]['purchase_date'] - purchase_date
        self.positions[symbol]['asset_type']- asset_type

        return self.positions
    
    def add_positions(self, positions: list[dict]) -> dict:

        if isinstance(positions, list):

            for position in positions: 

                self.add_position(
                    symbol=position['symbol'],
                    asset_type=position['asset_type'],
                    purchase_date=position.get('purchase_date', None),
                    purchase_price=position.get('purchase_price=', 0.0),
                    Quantity=position.get('Quantity',)

                )

        else:
            raise TypeError('Positions must be a list a dictionaries')
        
    def remove_position(self, symbol: str) -> tuple[bool, str]:

        if symbol in self.positions:
            del self.positions[symbol]
            return (True, '{symbol} was successfully removed,',format(symbol=symbol))
        else:
            return (False, '{symbol} did not exist in the portfolio,',format(symbol=symbol))
        
    def total_allocation(self):
        pass

    def rist_exposure(self):
        pass

    def is_profitable(self, symbol: str, current_price: float) -> bool:

        # Grab the purchas price
        purchase_price = self.positions[symbol]['purchase_price']


        if (purchase_price <= current_price):
            return True
        elif (purchase_price > current_price):
            return False
        
        @property
        def mt5_client(self) -> MT5Client:
            """Gets the MT5Client object for the Portfolio

            Return:
            ----
            {MT5Client} -- An authenticatd session with the ICM API.
            """

            return self._icm_client
        
        @icm_client.setter
        def icm_client(self, icm_client: MT5Client) -> None:
            """Sets the MT5Client object for the Portfolio

            Arguments:
            ----
            mt5_client {MT5Client} -- An authenticator session with the ICM API.
            """

            self._mt5_client = mt5_client

        def total_market_value(self):
            pass
    
    def in_portfolio(self, symbol: str) -> bool:

        if symbol in self.positions:
            return True
        else:
            return False
